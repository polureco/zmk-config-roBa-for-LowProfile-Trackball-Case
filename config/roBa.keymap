#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <100>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        WindowChange {
            bindings = <&kp LA(TAB)>;
            key-positions = <2 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R             &kp T                                               &kp Y                 &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F             &kp G        &kp LS(LG(S))         &kp LC(W)        &kp H                 &kp J  &lt 5 K    &kp L    &kp SEMI
&kp Z             &kp X         &kp C         &kp V             &kp B        &lt 5 SLASH           &kp LS(LC(M))    &kp N                 &kp M  &kp COMMA  &kp DOT  &lt 6 SLASH
&kp LEFT_CONTROL  &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 LANGUAGE_2  &lt 2 SPACE  &lt 3 LANGUAGE_1      &lt 4 BACKSPACE  &mt LEFT_SHIFT ENTER                             &lt 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        Control {
            bindings = <
&kp LC(Q)             &kp LC(W)  &kp LC(E)    &kp LC(R)  &kp LC(T)                                 &kp LC(Y)      &kp LC(U)  &kp LC(I)   &kp LC(O)   &kp LC(P)
&kp LC(A)             &kp LC(S)  &kp LC(D)    &kp LC(F)  &kp LC(G)  &trans      &kp LESS_THAN      &kp LC(H)      &kp LC(J)  &kp LC(K)   &kp LC(L)   &kp SINGLE_QUOTE
&mt LEFT_SHIFT LC(Z)  &kp LC(X)  &kp LC(C)    &kp LC(V)  &kp LC(B)  &trans      &kp GREATER_THAN   &kp LC(N)      &kp LC(M)  &kp LS(N8)  &kp LS(N9)  &kp SLASH
&kp LEFT_BRACKET      &kp TAB    &kp LS(TAB)  &trans     &trans     &trans      &kp RIGHT_BRACKET  &kp BACKSLASH                                     &kp LS(SLASH)
            >;
        };

        SYMBOL {
            bindings = <
&kp ESCAPE        &kp LS(N7)              &kp LS(N8)               &kp LS(N9)  &kp PLUS                                                     &mkp MB5   &mkp MB2        &mkp MB3        &kp F2           &kp MINUS
&kp LCTRL         &kp LS(N4)              &kp LS(N5)               &kp LS(N6)  &kp LG(LS(S))  &trans                &kp LS(LC(UP_ARROW))    &mkp MB4   &mkp MB1        &kp UP_ARROW    &kp F4           &kp LS(INT_RO)
&kp LEFT_SHIFT    &kp LS(N1)              &kp LS(N2)               &kp LS(N3)  &kp INT_YEN    &kp LC(RS(PLUS))      &kp LS(LC(DOWN_ARROW))  &kp LC(W)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp TILDE
&kp LEFT_CONTROL  &kp LS(LC(LEFT_ARROW))  &kp LS(LC(RIGHT_ARROW))  &trans      &trans         &trans                &kp DEL                 &kp TAB                                                     &kp LEFT_SHIFT
            >;
        };

        NUMBER {
            bindings = <
&kp ESCAPE              &kp LC(LS(TAB))         &kp UP_ARROW             &kp LC(TAB)              &kp PAGE_UP                              &kp LS(MINUS)  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS
&kp LS(LC(UP_ARROW))    &kp LEFT_ARROW          &kp DOWN_ARROW           &kp RIGHT_ARROW          &kp PAGE_DOWN  &trans      &kp KP_EQUAL  &kp PERIOD     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS
&kp LS(LC(DOWN_ARROW))  &kp LG(LA(LEFT_ARROW))  &kp LG(LA(RIGHT_ARROW))  &kp LG(LS(RIGHT_ARROW))  &trans         &trans      &trans        &kp NUMBER_0   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_ASTERISK
&trans                  &kp LS(LC(LEFT_ARROW))  &kp LS(LC(RIGHT_ARROW))  &trans                   &trans         &trans      &trans        &trans                                                   &kp KP_DIVIDE
            >;
        };

        MOUSEAND {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                            &trans
            >;
        };

        SCROLL {
            bindings = <
&kp LC(W)       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LC(LS(TAB))         &kp LC(TAB)                                  &trans  &mkp MB2  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LA(LC(LEFT_ARROW))  &kp LC(LA(RIGHT_ARROW))  &trans      &trans  &trans  &trans    &trans  &trans  &trans
&trans          &kp LESS_THAN         &kp GREATER_THAN       &kp LG(LEFT_ARROW)      &kp LG(RIGHT_ARROW)      &trans      &trans  &trans  &trans    &trans  &trans  &trans
&trans          &trans                &trans                 &trans                  &trans                   &trans      &trans  &trans                            &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        layer_6 {
            bindings = <
&kp F9  &kp F10  &kp F11  &kp F12  &trans                                  &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4
&kp F5  &kp F6   &kp F7   &kp F8   &kp LC(LS(M))  &trans      &trans       &trans         &trans          &kp UP_ARROW    &trans           &trans
&kp F1  &kp F2   &kp F3   &kp F4   &trans         &trans      &bootloader  &trans         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans   &trans   &trans   &trans         &trans      &trans       &kp LS(ENTER)                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };
    };
};
